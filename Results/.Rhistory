confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
View(data)
View(data)
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.95)
### creating a grid
grid=data.frame(0:650/100 + 0)
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength.,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
View(data)
View(data)
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.95)
### creating a grid
grid=data.frame(0:650/100 + 0)
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
confidence
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1],
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
confidence
prediction
0:2:10
0:10
0:10:2
0:10
0:2:10
0:10
grid=data.frame(seq(0, 6.5, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.95)
### creating a grid
grid=data.frame(seq(0, 6.5, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
v
prediction
View(prediction)
View(prediction)
View(confidence)
View(confidence)
View(grid)
View(grid)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.99)
### creating a grid
grid=data.frame(seq(0, 6.5, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.99)
### creating a grid
grid=data.frame(seq(0, 6.5, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.99)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
summary(data.lm)
View(data)
View(data)
View(data)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
summary(data.lm)
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
### creating a grid
grid=data.frame(seq(0, 7, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
View(grid)
View(grid)
A = grid + prediction
View(A)
View(A)
View(prediction)
View(prediction)
View(confidence)
View(confidence)
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
### creating a grid
grid=data.frame(seq(0, 7, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
### creating a grid
grid=data.frame(seq(0, 7, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
View(data)
View(data)
data = read.csv('C:\\Users\\msmsa\\Google Drive\\Courses\\ST 516 - Experimental statistics for engineers2\\HW1\\pp data.csv')
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
### Linear model
data.lm = lm(strength ~ mass.of.calcite, data= data)
summary(data.lm)
### setting for the plot
par(mfrow=c(2,2))
plot(data.lm)
### get the 95% Confidence Intervals for the slope and intercept
confint(data.lm,level = 0.90)
### creating a grid
grid=data.frame(seq(0, 7, by=0.1))
colnames(grid) = "mass.of.calcite"
### COnfidence Interval
confidence = predict(object = data.lm, newdata = grid, interval = "confidence" )
par(mfrow=c(1,1))
plot(x=data$mass.of.calcite, y=data$strength,col='purple',pch=19,
xlab = 'mass.of.calcite', ylab = 'strength.')
lines(x = grid$mass.of.calcite,y = confidence[,1])
lines(x = grid$mass.of.calcite, y = confidence[,2],lty=2,col ='red')
lines(x = grid$mass.of.calcite, y = confidence[,3],lty=2,col ='red')
### Prediction Interval
prediction = predict(object = data.lm, newdata = grid, interval = "prediction" )
lines(x = grid$mass.of.calcite, y = prediction[,2],lty=3,col ='green')
lines(x = grid$mass.of.calcite, y = prediction[,3],lty=3,col ='green')
legend("topright",legend=c("fit","95% Confidence Interval","true","Prediction Interval"),lwd=c(1,1,NA,1),
lty=c(1,3,NA,2),pch=c(NA,NA,19,NA),col=c("black","red","purple","green"))
View(data)
View(data)
View(grid)
View(grid)
View(prediction)
View(prediction)
View(confidence)
View(confidence)
data_contour = read.csv('contour Jul23_ NCont_NO3_Eutrophication.csv')
xlab <- list(
title = "Compost N content (%)",
titlefont = f,
tickfont = f2)
ylab <- list(
title = "Percent of N as NO3 (%)",
titlefont = f,
tickfont = f2)
m <- list(
l = 35,
r = 20,
b = 35,
t = 60)
fig<-plot_ly(
type = "contour",
x= seq(2.8,0.51, length.out = 10),
y = seq(3,87, length.out = 10),
z = matrix(data_contour$Dif_Eutrophication,nrow = 10,ncol = 10),
colorscale='Jet',
contours = list(start = -10,end = 2,size=1,showlabels = TRUE,tickfont=f),
color = I("black"),
width = 700, height = 700)
fig<-fig%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%layout(
font = f,
xaxis = xlab,
yaxis = ylab,
legend = f,
tickfont=f,
margin = m)%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%add_trace(x = c(0.51, 2.8),name = '', y = c(20, 20), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig<-fig%>%add_trace(fig,x = c(1.5,1.5),name = '', y = c(5,85), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig
library(plotly)
Sys.setenv("plotly_username"="msm_sardar")
Sys.setenv("plotly_api_key"="1sn2feGLOWDTIeCSpSRJ")
f <- list(
family = "sans serif",
size = 28,
color = 'black')
f2 <- list(
family = "sans serif",
size = 28,
color = 'black')
data_contour = read.csv('contour Jul23_ NCont_NO3_Eutrophication.csv')
xlab <- list(
title = "Compost N content (%)",
titlefont = f,
tickfont = f2)
ylab <- list(
title = "Percent of N as NO3 (%)",
titlefont = f,
tickfont = f2)
m <- list(
l = 35,
r = 20,
b = 35,
t = 60)
fig<-plot_ly(
type = "contour",
x= seq(2.8,0.51, length.out = 10),
y = seq(3,87, length.out = 10),
z = matrix(data_contour$Dif_Eutrophication,nrow = 10,ncol = 10),
colorscale='Jet',
contours = list(start = -10,end = 2,size=1,showlabels = TRUE,tickfont=f),
color = I("black"),
width = 700, height = 700)
fig<-fig%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%layout(
font = f,
xaxis = xlab,
yaxis = ylab,
legend = f,
tickfont=f,
margin = m)%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%add_trace(x = c(0.51, 2.8),name = '', y = c(20, 20), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig<-fig%>%add_trace(fig,x = c(1.5,1.5),name = '', y = c(5,85), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig
data_contour = read.csv('contour Jul23_ NCont_NO3_Eutrophication.csv')
setwd("C:/Users/msmsa/Google Drive/Brightway2/Compost_Utilization/Results")
data_contour = read.csv('contour Jul23_ NCont_NO3_Eutrophication.csv')
xlab <- list(
title = "Compost N content (%)",
titlefont = f,
tickfont = f2)
ylab <- list(
title = "Percent of N as NO3 (%)",
titlefont = f,
tickfont = f2)
m <- list(
l = 35,
r = 20,
b = 35,
t = 60)
fig<-plot_ly(
type = "contour",
x= seq(2.8,0.51, length.out = 10),
y = seq(3,87, length.out = 10),
z = matrix(data_contour$Dif_Eutrophication,nrow = 10,ncol = 10),
colorscale='Jet',
contours = list(start = -10,end = 2,size=1,showlabels = TRUE,tickfont=f),
color = I("black"),
width = 700, height = 700)
fig<-fig%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%layout(
font = f,
xaxis = xlab,
yaxis = ylab,
legend = f,
tickfont=f,
margin = m)%>% colorbar(title = "Elevation \n in meters")
fig<-fig%>%add_trace(x = c(0.51, 2.8),name = '', y = c(20, 20), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig<-fig%>%add_trace(fig,x = c(1.5,1.5),name = '', y = c(5,85), type = "scatter", mode = "lines",color = I('white'),
line = list( width=3, dash='dash'))
fig
